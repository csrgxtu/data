
blogxtu
ideas
change
us
then
changes
the
world
skip
to
content
home
os
o
linux
o
windows
program
o
challenge
o
cryptography
o
c
o
cplus
o
shell
o
perl
o
php
o
python
o
java
video
o
music
video
o
movie
o
chanel
gags
o
clip
life
about
more

what
is
ssl

secure
sockets
layer

and
what
are
ssl
certificates
foreiners
learning
chinese

do
it
yourself
ssl
guide
part
1
an
introduction
posted
on
december
8

2013
by
archer
reilly
many
people
want
or
need
to
have
the
connection
between
the
browser
and
the
web
server
encrypted
but
aren
t
been
able
to
set
it
up
this
guide
is
intended
to
help
people
with
the
typical
apache
on
linux
setup
to
make
encrypted
connections
available
with
a
minimum
of
fuss
and
if
the
encrypted
connection
isn
t
for
a
commercial
purpose
to
do
so
without
spending
a
penny
limitations
sometimes
hosting
providers
block
the
user
from
setting
without
upgrading
i
e
pay
more
money
for
the
hosting
account
another
possibility
is
that
the
hosting
provider
doesn
t
want
users
to
have
any
hands
on
control
regardless
of
which
hosting
package
you
have
with
them
if
you
have
a
package
that
allows
full
root
access
or
something
similar
you
re
unlikely
to
have
any
problems
however
it
s
not
always
necessary
to
have
full
access
to
be
able
to
set
it
up
in
this
article
are
alternatives
to
the
hands
on
approach
you
would
use
when
logged
in
as
root
but
the
best
i
can
offer
are
general
pointers
this
is
because
most
hosting
providers
offer
some
sort
of
control
panel
for
administrative
tasks
but
this
access
can
vary
widely
from
one
hosting
provider
to
another
key
generation
as
some
of
you
might
already
know
a
certificate
is
needed
to
enable
an
encrypted
connection
the
connection
can
be
encrypted
using
the
secure
sockets
layer
ssl
or
the
transport
layer
security
tls
mechanism
but
you
don
t
need
to
worry
about
which
will
be
used
because
that
will
be
agreed
upon
by
the
browser
and
apache
before
we
can
obtain
a
certificate
file
we
must
first
generate
a
key
file
to
generate
a
key
file
whilst
logged
in
as
root
via
secure
shell
ssh
you
need
to
enter
the
following
command
or
a
variant
of
it
that
s
tailored
to
your
preferences
key
generation
i
ll
explain
each
part
of
the
command
if
you
re
forced
to
use
a
control
panel
provided
by
your
hosting
provider
you
ll
have
a
decent
idea
of
what
to
look
for
and
what
to
do
some
control
panels
hide
this
step
from
the
user
and
combine
this
key
generation
step
with
the
certificate
generation
step
if
you
can
t
find
any
option
for
generating
a
key
but
have
an
option
for
generating
certificates
don
t
panic
if
you
logged
in
as
root
issued
this
command
over
ssh
and
got
a
message
back
saying
something
like
bash
openssl
command
not
found
then
the
openssl
program
isn
t
installed
and
you
either
need
to
install
it
yourself
or
have
your
hosting
provider
install
it
for
you
the
first
part
of
the
command
is
the
name
of
the
program
we
re
using
openssl
this
could
be
something
else
to
look
for
on
a
control
panel
if
you
can
t
find
keys
or
certificates
either
openssl
or
perhaps
just
ssl
tls
might
be
another
possibility
but
an
unlikely
one
next
up
is
the
key
type
option
the
two
most
popular
types
of
keys
are
dsa
and
rsa
dsa
keys
are
used
for
digital
signatures
and
aren
t
used
for
encryption
rsa
keys
can
be
used
for
both
digital
signatures
and
encryption
here
we
need
to
generate
an
rsa
key
and
you
should
look
out
for
this
option
if
you
re
using
a
control
panel
to
generate
the
key
the
next
two
parts
are
actually
a
single
instruction
to
openssl
the
out
parameter
simply
indicates
that
the
following
text
indicates
the
location
of
where
the
file
should
be
placed
and
what
the
name
of
the
file
should
be
when
issuing
this
command
via
ssh
i
recommend
using
an
absolute
pathname
such
as
usr
local
apache2
apache
key
pem
so
you
know
exactly
where
it
is
once
it
s
been
created
if
you
re
generating
the
key
through
a
control
panel
look
for
an
option
for
specifying
where
it
should
be
placed
or
look
for
it
telling
you
where
it
will
be
placed
regardless
of
which
method
you
use
make
sure
that
it
isn
t
placed
in
a
directory
where
apache
serves
web
pages
the
last
option
of
the
command
is
the
size
if
the
key
in
bits
i
use
2048
because
it
s
the
recommended
size
based
on
current
technology
you
can
increase
the
number
to
make
it
more
secure
if
you
prefer
but
this
means
that
you
might
take
a
performance
hit
when
using
ssl
a
certificate
authority
ca
might
also
require
that
you
use
a
size
specified
by
them
but
you
don
t
need
to
worry
about
ca
s
unless
you
re
intending
to
use
ssl
for
commercial
or
similar
purposes
another
noteworthy
option
that
s
not
used
in
the
command
given
above
is
the
des3
option
it
s
used
to
add
a
protecting
password
to
the
key
this
might
sound
like
a
good
thing
but
for
the
purposes
of
ssl
in
apache
it
s
not
if
you
were
to
use
this
option
then
someone
would
have
to
somehow
input
this
password
every
time
an
ssl
connection
is
made
if
you
see
an
option
for
this
in
a
control
panel
section
for
making
keys
don
t
use
it
obtaining
the
certificate
obtaining
a
certificate
similar
to
those
seen
on
most
commercial
sites
where
they
are
automatically
be
trusted
by
browsers
requires
two
steps
the
first
step
will
be
performed
by
you
but
you
re
not
able
to
perform
the
second
step
the
ca
such
as
verisign
or
godaddy
will
perform
the
last
step
the
first
step
is
to
create
what
s
called
a
certificate
signing
request
csr
a
csr
is
a
file
that
once
signed
by
a
ca
will
become
your
certificate
here
s
the
command
to
create
it
normal
certificate
again
i
ll
give
you
some
information
on
each
part
of
the
command
so
you
can
translate
this
into
actions
in
your
control
panel
or
just
modify
it
if
you
want
to
change
something
but
it
s
unlikely
you
ll
want
to
change
anything
other
than
the
file
names
the
first
new
command
is
req
this
command
is
to
indicate
that
we
intend
to
use
csr
management
if
you
re
using
a
control
panel
and
you
can
t
find
anything
about
a
certificate
request
option
try
looking
for
something
like
csr
management
instead
the
new
option
is
an
obvious
one
it
simply
means
that
we
re
creating
a
new
csr
rather
than
doing
something
to
an
existing
one
the
key
option
specifies
the
location
of
the
key
file
used
with
the
certificate
you
must
alter
this
option
to
point
to
the
location
of
your
key
file
that
you
generated
earlier
in
this
guide
if
you
re
using
a
control
panel
you
might
be
given
a
field
in
a
form
to
specify
the
location
of
the
key
if
this
is
the
case
then
do
so
however
some
popular
control
panels
ask
you
to
copy
and
paste
the
key
into
a
text
area
how
you
get
the
key
into
your
clipboard
for
pasting
in
to
the
text
area
will
depend
on
what
can
or
cannot
do
with
your
host
in
my
experience
the
method
most
likely
to
be
available
is
to
copy
the
key
to
your
computer
then
open
it
in
a
text
editor
you
should
use
the
most
secure
transfer
method
available
to
you
but
if
you
re
having
to
do
things
this
way
your
options
are
probably
quite
limited
trying
to
open
your
key
file
on
a
windows
pc
will
almost
certainly
cause
it
to
tell
you
that
it
doesn
t
know
what
to
do
with
the
file
instead
open
the
file
with
notepad
i
ve
opened
the
key
in
notepad
on
windows
xp
the
key
was
presented
in
text
form
but
it
showed
my
test
key
over
just
two
lines
depending
on
your
control
panel
it
might
be
ok
to
paste
in
the
key
as
notepad
presents
it
but
you
might
have
to
make
some
changes
after
you
paste
it
in
to
make
it
display
correctly
the
following
is
a
demonstration
of
how
a
2048
bit
key
would
is
often
represented
in
text
form
2048
bit
key
as
you
can
see
it
s
a
block
of
text
with
start
and
end
markers
on
lines
of
their
own
at
the
beginning
and
end
of
the
key
the
main
key
text
appears
as
25
lines
that
with
the
exception
of
the
last
line
are
64
characters
long
a
key
that
has
fewer
bits
will
have
fewer
lines
and
a
key
with
more
bits
will
have
more
lines
but
the
line
length
stays
the
same
the
final
part
of
the
command
out
serves
the
same
purpose
here
as
it
did
with
the
command
we
used
to
generate
the
key
follow
the
same
guideline
of
giving
an
absolute
pathname
if
possible
so
you
know
exactly
where
it
s
going
to
be
placed
once
you
have
your
csr
file
you
need
to
find
a
ca
to
hand
it
over
to
for
the
second
step
signing
it
after
they
ve
done
whatever
checks
they
deem
necessary
they
ll
then
sign
your
csr
and
give
you
your
new
certificate
obtaining
a
free
certificate
if
you
want
to
create
a
certificate
of
your
own
without
having
to
involve
a
ca
you
can
perform
both
steps
by
yourself
this
means
that
the
user
s
browser
will
present
them
with
a
huge
this
certificate
is
self
signed
warning
but
if
this
doesn
t
concern
you
then
it
doesn
t
matter
self
signed
certificates
can
be
a
cheap
alternative
to
ca
signed
certificates
when
you
re
testing
things
out
and
experimenting
or
if
you
re
the
only
person
that
needs
a
secure
connection
to
your
host
they
can
also
be
good
for
allowing
regular
users
to
use
secured
connections
if
they
know
they
can
trust
you
and
you
warn
them
about
the
certificate
warnings
in
advance
here
the
process
of
creating
the
csr
and
having
it
signed
are
merged
into
one
so
you
don
t
create
the
csr
file
instead
you
just
generate
the
certificate
file
directly
the
following
is
a
command
to
generate
a
self
signed
certificate
obtaining
a
free
certificate
as
you
can
see
it
s
similar
to
the
other
command
for
creating
a
csr
that
you
would
have
signed
by
a
ca
but
it
has
two
more
options
than
the
previous
one
the
first
of
the
extra
options
is
the
x509
option
this
is
the
option
that
tells
openssl
to
output
a
self
signed
certificate
instead
of
a
csr
if
you
re
using
a
control
panel
to
create
a
self
signed
certificate
be
sure
to
look
for
and
use
an
x509
option
the
second
of
the
extra
options
is
the
days
option
this
option
simply
specifies
how
long
in
days
the
certificate
is
valid
once
the
number
of
days
has
passed
you
should
generate
a
new
certificate
file
and
dispose
of
the
old
one
vn
f
1
9
22
1171
please
wait
rating
0
0
10
0
votes
cast
vn
f
1
9
22
1171
rating
0
from
0
votes
this
entry
was
posted
in
linux
os
shell
and
tagged
apache
ssl
blogxtu
https
blogxtu
ssl
enable
ssl
linux
ssl
openssl
ssl
bookmark
the
permalink

what
is
ssl

secure
sockets
layer

and
what
are
ssl
certificates
foreiners
learning
chinese

leave
a
reply
cancel
reply
your
email
address
will
not
be
published
required
fields
are
marked
name
author
email
email
website
url
you
may
use
these
html
tags
and
attributes
a
href
quot
quot
title
quot
quot
abbr
title
quot
quot
acronym
title
quot
quot
b
blockquote
cite
quot
quot
cite
code
del
datetime
quot
quot
em
i
q
cite
quot
quot
strike
strong
post
comment
search
for
s
search
march
2014
m
t
w
t
f
s
s
laquo

feb
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
recent
posts
manually
install
sun
jdk
on
ubuntu
linux
cryptology
102


substitution
cryptography
101
programming
challenge

largest
product
in
a
series
programming
challenge

nst
prime
recent
comments
archer
reilly
on
cryptography
101
archer
reilly
on
cryptography
101
archer
reilly
on
programming
challenge

nst
prime
archer
reilly
on
blogxtu
seo
101


install
wordpress
in
lamp
archer
reilly
on
blogxtu
seo
101


install
wordpress
in
lamp
archives
february
2014
december
2013
categories
challenge
cryptography
java
life
linux
music
video
os
program
python
shell
uncategorized
video
meta
log
in
entries
rss
comments
rss
wordpress
org
blogxtu
proudly
powered
by
wordpress
